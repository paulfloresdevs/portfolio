---
import GitHub from "./icons/GitHub.astro"
import Spring from "./icons/Spring.astro"
import Docker from "./icons/Docker.astro"
import PostgreSQL from "./icons/PostgreSQL.astro"
import Swagger from "./icons/Swagger.astro"
import Maven from "./icons/Maven.astro"
import MySQL from "./icons/MySQL.astro"
import Link from "./icons/Link.astro"
import LinkButton from "./LinkButton.astro"
import { imageConfig } from "astro:assets"

const TAGS = {
  SPRING: {
    name: "Spring",
    class: "bg-black text-white",
    icon: Spring
  },
  DOCKER: {
    name: "Docker",
    class: "bg-[#2496ed] text-white",
    icon: Docker,
  },
  POSTGRESQL: {
    name: "PostgreSQL",
    class: "bg-[#C0C0C0] text-[#404040]",
    icon: PostgreSQL,
  },
  SWAGGER: {
    name: "Swagger",
    class: "bg-[#333333] text-white",
    icon: Swagger
  },
  MAVEN: {
    name: "Maven",
    class: "bg-[#2E8B57] text-white",
    icon: Maven
  },
  MYSQL: {
    name: "MySQL",
    class: "bg-[#CCCCCC] text-[#333333]",
    icon: MySQL
  }
}
const PROJECTS = [
  {
    title: "Bank App",    
    description:
      "Secure microservices project with Spring Boot and Spring Cloud. Includes advanced security (OAuth2, JWT) and Docker orchestration. offers a solid foundation in modern microservices-based application development.",
    link: "https://bank-application-paul10fc.herokuapp.com/swagger-ui.html",  
    github: "https://github.com/Paul10FC/bank-application",
    image: "/images/bank-app.png",
    tags: [TAGS.SPRING, TAGS.DOCKER, TAGS.POSTGRESQL, TAGS.SWAGGER, TAGS.MAVEN],
  },
  {
    title: "Pizza App",
    description:
      "Complete backend configuration for the comprehensive management of a pizza warehouse, covering key aspects such as customer administration, billing, personalized filters by type of pizza and dynamic promotions. Developed roles, permissions and authentication systems using JWT to ensure strong layers of security. Implementing Docker for the final integration enabled a flexible and scalable infrastructure for the project. Technologies used: MySQL, Hibernate, JWT, Postman, Spring Data JPA, Spring, Spring Security, Spring Boot, Java, Loombook, JPQL, Swagger, JUnit and Docker.",
    github: "https://github.com/Paul10FC/platzi-pizzeria",
    tags: [TAGS.SPRING, TAGS.MYSQL, TAGS.DOCKER, TAGS.SWAGGER]
  },  
  {
    title: "Supermarket App",
    description:
      "Development of a comprehensive API for the efficient management of a supermarket, using Java Spring with solid integration to a PostgreSQL database. The project included the design, deployment and supervision of services for product management, culminating in a successful launch of the application to ensure a seamless consumer experience. Tools used: Spring Framework, Spring Boot, Spring Data JPA, Data Mapper, Spring MVC, Swagger and JUnit.",
    github: "https://github.com/Paul10FC/platzi-market",
    tags: [TAGS.SPRING, TAGS.POSTGRESQL, TAGS.SWAGGER]
  }
]
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" loading="lazy" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <ul class="flex flex-row mb-2 gap-x-2">
          {tags.map((tag) => (
            <li>
              <span
                class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
              >
                <tag.icon class="size-4" />
                {tag.name}
              </span>
            </li>
          ))}
        </ul>

      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              Code
              
            </LinkButton>
          )}
          {link && (
            <LinkButton href={link}>
              <Link class="size-4" />
              Preview
            </LinkButton>
          )}
        </footer>
    </div>
  </div>
</article>
    ))
  }
</div>



